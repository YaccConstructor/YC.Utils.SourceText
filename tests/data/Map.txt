Problem origin.
Often in reengineering we must know a position of cpecified token. 
Usually (the most convinient) it is a trinity (file name, line, column). But this structure is too memory-hungry, because:

1) file name is a pointer on string - 8 bytes on x64.
2) line and column are int - 8 bytes together;
3) trinity is .NET class, requesting 24 bytes on x64.
40 bytes together. Attached to each node, it can easily be a half of memory, taken by syntax tree.

There is a solution, reducing these requirements to 8 bytes. All information can be compressed in int64 number.
1) All file names are arrenged in array. We can assume, then there is not more, then 2^f different files.
2) Assume, there is not more then 2^c columns and 2^l lines in each file.
So, if set f=17,c=17,l=30, we can see, int64 is enough for storing entire position.

Problem statement itself.
Implement library, compressing and decompressing position between compact and human-sensitive form.
1) int64 <-> Described trinity (file id instead name)
2) Possibility to specify f,c,l (with other names, of course)
3) Implemet all in separate library in YC.
4) Example of usage.
5) If everything is ok, embed structure in YC.